/**
 * This file was generated by running: npm run codegen
 * Do not edit this file as it will be regenerated by codegen.
 *
 * @generated SignedSource<<c77eb44ca6c60ea74b80bea2a11cc5c6>>
 */

#pragma once

#include <NativeModules.h>
#include <tuple>

namespace facebook::react {

REACT_STRUCT(DeviceInfoMemory)
struct DeviceInfoMemory {
    REACT_FIELD(total, double)
    double total;
    
    REACT_FIELD(available, double) 
    double available;
};

REACT_STRUCT(DeviceInfoStorage)
struct DeviceInfoStorage {
    REACT_FIELD(total, double)
    double total;
    
    REACT_FIELD(available, double)
    double available;
};

REACT_STRUCT(DeviceInfoBattery)
struct DeviceInfoBattery {
    REACT_FIELD(level, double)
    double level;
    
    REACT_FIELD(isCharging, bool)
    bool isCharging;
};

REACT_STRUCT(DeviceInfoCpu)
struct DeviceInfoCpu {
    REACT_FIELD(usage, double)
    double usage;
    
    REACT_FIELD(cores, double)
    double cores;
};

REACT_STRUCT(DeviceInfoNetwork)
struct DeviceInfoNetwork {
    REACT_FIELD(type, std::string)
    std::string type;
    
    REACT_FIELD(isConnected, bool)
    bool isConnected;
};

REACT_STRUCT(DeviceInfo)
struct DeviceInfo {
    REACT_FIELD(platform, std::string)
    std::string platform;
    
    REACT_FIELD(osVersion, std::string)
    std::string osVersion;
    
    REACT_FIELD(deviceModel, std::string)
    std::string deviceModel;
    
    REACT_FIELD(memory, DeviceInfoMemory)
    DeviceInfoMemory memory;
    
    REACT_FIELD(storage, DeviceInfoStorage)
    DeviceInfoStorage storage;
    
    REACT_FIELD(battery, DeviceInfoBattery)
    DeviceInfoBattery battery;
    
    REACT_FIELD(cpu, DeviceInfoCpu)
    DeviceInfoCpu cpu;
    
    REACT_FIELD(network, DeviceInfoNetwork)
    DeviceInfoNetwork network;
};

REACT_STRUCT(WindowsPerformanceCounters)
struct WindowsPerformanceCounters {
    REACT_FIELD(cpuUsage, double)
    double cpuUsage;
    
    REACT_FIELD(memoryUsage, double)
    double memoryUsage;
    
    REACT_FIELD(diskUsage, double)
    double diskUsage;
};

REACT_STRUCT(WindowsWmiData)
struct WindowsWmiData {
    REACT_FIELD(computerSystem, std::string)
    std::string computerSystem;
    
    REACT_FIELD(operatingSystem, std::string)
    std::string operatingSystem;
    
    REACT_FIELD(processor, std::string)
    std::string processor;
};

REACT_STRUCT(WindowsSystemInfo)
struct WindowsSystemInfo {
    REACT_FIELD(osVersion, std::string)
    std::string osVersion;
    
    REACT_FIELD(buildNumber, std::string)
    std::string buildNumber;
    
    REACT_FIELD(processor, std::string)
    std::string processor;
    
    REACT_FIELD(architecture, std::string)
    std::string architecture;
    
    REACT_FIELD(performanceCounters, WindowsPerformanceCounters)
    WindowsPerformanceCounters performanceCounters;
    
    REACT_FIELD(wmiData, WindowsWmiData)
    WindowsWmiData wmiData;
};

template <>
struct Bridging<DeviceInfoMemory> : NativeModuleBridging<DeviceInfoMemory> {};

template <>
struct Bridging<DeviceInfoStorage> : NativeModuleBridging<DeviceInfoStorage> {};

template <>
struct Bridging<DeviceInfoBattery> : NativeModuleBridging<DeviceInfoBattery> {};

template <>
struct Bridging<DeviceInfoCpu> : NativeModuleBridging<DeviceInfoCpu> {};

template <>
struct Bridging<DeviceInfoNetwork> : NativeModuleBridging<DeviceInfoNetwork> {};

template <>
struct Bridging<DeviceInfo> : NativeModuleBridging<DeviceInfo> {};

template <>
struct Bridging<WindowsPerformanceCounters> : NativeModuleBridging<WindowsPerformanceCounters> {};

template <>
struct Bridging<WindowsWmiData> : NativeModuleBridging<WindowsWmiData> {};

template <>
struct Bridging<WindowsSystemInfo> : NativeModuleBridging<WindowsSystemInfo> {};

class JSI_EXPORT NativeDeviceAISpecJSI : public TurboModule {
protected:
  NativeDeviceAISpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value getDeviceInfo(jsi::Runtime &rt) = 0;
  virtual jsi::Value getWindowsSystemInfo(jsi::Runtime &rt) = 0;
  virtual jsi::Value isNativeModuleAvailable(jsi::Runtime &rt) = 0;
  virtual jsi::Value getSupportedFeatures(jsi::Runtime &rt) = 0;
};

template <typename T>
class JSI_EXPORT NativeDeviceAISpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativeDeviceAISpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("DeviceAI", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  NativeDeviceAISpecJSI delegate_;
};

} // namespace facebook::react