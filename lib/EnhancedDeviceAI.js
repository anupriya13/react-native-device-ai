var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _require=require('react-native'),Platform=_require.Platform,Dimensions=_require.Dimensions;var AzureOpenAI=require('./AzureOpenAI.js');var MCPClient=require('./MCPClient.js');var NativeDeviceAI=null;try{var NativeModule=require('./NativeDeviceAI.js');NativeDeviceAI=NativeModule;}catch(error){console.log('Native DeviceAI module not available, using JavaScript fallback:',error.message);}var EnhancedDeviceAI=function(){function EnhancedDeviceAI(){(0,_classCallCheck2.default)(this,EnhancedDeviceAI);this.deviceInfo=null;this.lastUpdate=null;this.cacheTimeout=5*60*1000;this.mcpClient=new MCPClient();this.mcpEnabled=false;this._autoConfigureFromEnvironment();}return(0,_createClass2.default)(EnhancedDeviceAI,[{key:"initializeMCP",value:(function(){var _initializeMCP=(0,_asyncToGenerator2.default)(function*(mcpConfig={}){try{var result=yield this.mcpClient.initialize(mcpConfig);this.mcpEnabled=result.success;if(this.mcpEnabled){console.log('MCP integration enabled successfully');console.log('Available AI providers:',result.providers);console.log('Available data sources:',result.dataSources);}return result;}catch(error){console.error('Failed to initialize MCP:',error);this.mcpEnabled=false;return{success:false,error:error.message};}});function initializeMCP(){return _initializeMCP.apply(this,arguments);}return initializeMCP;}())},{key:"configure",value:function configure(config){AzureOpenAI.setConfig(config);}},{key:"addMCPServer",value:(function(){var _addMCPServer=(0,_asyncToGenerator2.default)(function*(serverConfig){if(!this.mcpClient){throw new Error('MCP client not initialized');}return yield this.mcpClient.connectServer(serverConfig);});function addMCPServer(_x){return _addMCPServer.apply(this,arguments);}return addMCPServer;}())},{key:"getDeviceInsights",value:(function(){var _getDeviceInsights=(0,_asyncToGenerator2.default)(function*(options={}){try{var _options$preferredPro=options.preferredProviders,preferredProviders=_options$preferredPro===void 0?[]:_options$preferredPro,_options$dataSources=options.dataSources,dataSources=_options$dataSources===void 0?[]:_options$dataSources,_options$includeOSSpe=options.includeOSSpecific,includeOSSpecific=_options$includeOSSpe===void 0?true:_options$includeOSSpe;var deviceData=this.mcpEnabled?yield this._collectEnhancedDeviceInfo(dataSources,includeOSSpecific):yield this._collectDeviceInfo();var aiInsights;try{if(this.mcpEnabled){var mcpResult=yield this.mcpClient.generateInsights(deviceData,'general',preferredProviders);aiInsights=mcpResult.insights;}else if(AzureOpenAI.isConfigured()){aiInsights=yield AzureOpenAI.generateInsights(deviceData,'general');}else{aiInsights=this._generateFallbackInsights(deviceData);}}catch(aiError){console.log('AI service unavailable, using fallback insights:',aiError.message);aiInsights=this._generateFallbackInsights(deviceData);}return{success:true,deviceInfo:deviceData,insights:aiInsights,recommendations:this._generateBasicRecommendations(deviceData),mcpEnabled:this.mcpEnabled,providers:this.mcpEnabled?this.mcpClient.getProviderStatus():null,osSpecific:includeOSSpecific,timestamp:new Date().toISOString()};}catch(error){console.error('Error getting device insights:',error);return{success:false,error:error.message,timestamp:new Date().toISOString()};}});function getDeviceInsights(){return _getDeviceInsights.apply(this,arguments);}return getDeviceInsights;}())},{key:"getBatteryAdvice",value:(function(){var _getBatteryAdvice=(0,_asyncToGenerator2.default)(function*(options={}){try{var _options$preferredPro2=options.preferredProviders,preferredProviders=_options$preferredPro2===void 0?[]:_options$preferredPro2;var deviceData=this.mcpEnabled?yield this._collectEnhancedDeviceInfo(['battery-monitor','system-monitor'],true):yield this._collectDeviceInfo();var batteryData=this._extractBatteryInfo(deviceData);var aiAdvice;try{if(this.mcpEnabled){var mcpResult=yield this.mcpClient.generateInsights(batteryData,'battery',preferredProviders);aiAdvice=mcpResult.insights;}else if(AzureOpenAI.isConfigured()){aiAdvice=yield AzureOpenAI.generateInsights(batteryData,'battery');}else{aiAdvice=this._generateFallbackBatteryAdvice(batteryData);}}catch(aiError){console.log('AI service unavailable, using fallback battery advice:',aiError.message);aiAdvice=this._generateFallbackBatteryAdvice(batteryData);}return{success:true,batteryInfo:batteryData,advice:aiAdvice,tips:this._getBatteryTips(),mcpEnabled:this.mcpEnabled,timestamp:new Date().toISOString()};}catch(error){console.error('Error getting battery advice:',error);return{success:false,error:error.message,timestamp:new Date().toISOString()};}});function getBatteryAdvice(){return _getBatteryAdvice.apply(this,arguments);}return getBatteryAdvice;}())},{key:"getPerformanceTips",value:(function(){var _getPerformanceTips=(0,_asyncToGenerator2.default)(function*(options={}){try{var _options$preferredPro3=options.preferredProviders,preferredProviders=_options$preferredPro3===void 0?[]:_options$preferredPro3;var deviceData=this.mcpEnabled?yield this._collectEnhancedDeviceInfo(['system-monitor','network-monitor'],true):yield this._collectDeviceInfo();var performanceData=this._extractPerformanceInfo(deviceData);var aiTips;try{if(this.mcpEnabled){var mcpResult=yield this.mcpClient.generateInsights(performanceData,'performance',preferredProviders);aiTips=mcpResult.insights;}else if(AzureOpenAI.isConfigured()){aiTips=yield AzureOpenAI.generateInsights(performanceData,'performance');}else{aiTips=this._generateFallbackPerformanceTips(performanceData);}}catch(aiError){console.log('AI service unavailable, using fallback performance tips:',aiError.message);aiTips=this._generateFallbackPerformanceTips(performanceData);}return{success:true,performanceInfo:performanceData,tips:aiTips,recommendations:this._getPerformanceRecommendations(),mcpEnabled:this.mcpEnabled,timestamp:new Date().toISOString()};}catch(error){console.error('Error getting performance tips:',error);return{success:false,error:error.message,timestamp:new Date().toISOString()};}});function getPerformanceTips(){return _getPerformanceTips.apply(this,arguments);}return getPerformanceTips;}())},{key:"queryDeviceInfo",value:(function(){var _queryDeviceInfo=(0,_asyncToGenerator2.default)(function*(query,options={}){try{var _options$preferredPro4=options.preferredProviders,preferredProviders=_options$preferredPro4===void 0?[]:_options$preferredPro4,_options$includeConte=options.includeContext,includeContext=_options$includeConte===void 0?true:_options$includeConte;if(!query||typeof query!=='string'){throw new Error('Query must be a non-empty string');}var deviceData=includeContext?this.mcpEnabled?yield this._collectEnhancedDeviceInfo([],true):yield this._collectDeviceInfo():{};var relevantData=this._extractRelevantData(query,deviceData);var response;try{if(this.mcpEnabled){var mcpResult=yield this.mcpClient.generateInsights({query,relevantData},'query',preferredProviders);response=mcpResult.insights;}else if(AzureOpenAI.isConfigured()){response=yield AzureOpenAI.generateCustomResponse(query,relevantData);}else{response=this._generateStaticResponse(query,relevantData);}}catch(aiError){console.log('AI service unavailable, using static response:',aiError.message);response=this._generateStaticResponse(query,relevantData);}return{success:true,query:query,response:response,relevantData:relevantData,mcpEnabled:this.mcpEnabled,timestamp:new Date().toISOString()};}catch(error){console.error('Error processing device query:',error);return{success:false,error:error.message,timestamp:new Date().toISOString()};}});function queryDeviceInfo(_x2){return _queryDeviceInfo.apply(this,arguments);}return queryDeviceInfo;}())},{key:"getMCPStatus",value:function getMCPStatus(){if(!this.mcpEnabled){return{enabled:false,reason:'MCP client not initialized'};}return{enabled:true,providers:this.mcpClient.getProviderStatus(),dataSources:this.mcpClient.getDataSourceStatus(),initialized:this.mcpClient.isInitialized};}},{key:"isNativeModuleAvailable",value:function isNativeModuleAvailable(){return NativeDeviceAI!==null;}},{key:"getSupportedFeatures",value:function getSupportedFeatures(){var features=['device-insights','battery-advice','performance-tips','natural-language-queries'];if(this.isNativeModuleAvailable()){features.push('native-device-info');if(Platform.OS==='windows'){features.push('windows-system-info');}}if(this.mcpEnabled){features.push('mcp-multi-provider-ai');features.push('mcp-enhanced-data-collection');features.push('mcp-real-time-monitoring');}if(AzureOpenAI.isConfigured()){features.push('azure-openai-integration');}return features;}},{key:"cleanup",value:(function(){var _cleanup=(0,_asyncToGenerator2.default)(function*(){if(this.mcpEnabled&&this.mcpClient){yield this.mcpClient.disconnect();this.mcpEnabled=false;}});function cleanup(){return _cleanup.apply(this,arguments);}return cleanup;}())},{key:"_collectEnhancedDeviceInfo",value:function(){var _collectEnhancedDeviceInfo2=(0,_asyncToGenerator2.default)(function*(dataSources=[],includeOSSpecific=true){var mcpData=yield this.mcpClient.collectDeviceData(dataSources);var legacyData=yield this._collectDeviceInfo();var osSpecificData={};if(includeOSSpecific&&this.mcpEnabled){osSpecificData=yield this._collectOSSpecificData();}return{...legacyData,mcpData:mcpData.data,mcpSources:mcpData.sources,mcpErrors:mcpData.errors,osSpecificData:osSpecificData};});function _collectEnhancedDeviceInfo(){return _collectEnhancedDeviceInfo2.apply(this,arguments);}return _collectEnhancedDeviceInfo;}()},{key:"_collectOSSpecificData",value:(function(){var _collectOSSpecificData2=(0,_asyncToGenerator2.default)(function*(){try{var osServerName=this._getOSSpecificServerName();if(!osServerName){return{available:false,reason:'No OS-specific server available'};}var osServer=this.mcpClient.deviceDataSources.get(osServerName);if(!osServer||!osServer.isConnected()){return{available:false,reason:`${osServerName} not connected`};}var osData=yield osServer.collectData();return{available:true,platform:Platform.OS,serverName:osServerName,data:osData.data,timestamp:osData.timestamp};}catch(error){console.error('Failed to collect OS-specific data:',error);return{available:false,error:error.message,platform:Platform.OS};}});function _collectOSSpecificData(){return _collectOSSpecificData2.apply(this,arguments);}return _collectOSSpecificData;}())},{key:"_getOSSpecificServerName",value:function _getOSSpecificServerName(){switch(Platform.OS){case'windows':return'windows-device-server';case'android':return'android-device-server';case'ios':return'ios-device-server';default:return null;}}},{key:"_autoConfigureFromEnvironment",value:function _autoConfigureFromEnvironment(){try{var envConfig=AzureOpenAI.AzureOpenAI.loadFromEnvironment();if(envConfig){this.configure(envConfig);console.log('Azure OpenAI auto-configured from environment variables');}}catch(error){console.log('Environment configuration not available - manual configuration required');}}},{key:"_collectDeviceInfo",value:function(){var _collectDeviceInfo2=(0,_asyncToGenerator2.default)(function*(){if(this.deviceInfo&&this.lastUpdate&&Date.now()-this.lastUpdate<this.cacheTimeout){return this.deviceInfo;}try{var deviceData={};if(typeof Platform!=='undefined'){deviceData.platform=Platform.OS;deviceData.version=Platform.Version;}if(typeof Dimensions!=='undefined'){var _Dimensions$get=Dimensions.get('window'),width=_Dimensions$get.width,height=_Dimensions$get.height;deviceData.screen={width,height};}if(this.isNativeModuleAvailable()){try{var nativeInfo=yield NativeDeviceAI.getDeviceInfo();deviceData={...deviceData,...nativeInfo};}catch(error){console.log('Native device info not available:',error.message);}}if(Object.keys(deviceData).length===0){deviceData=this._generateMockDeviceData();}this.deviceInfo=deviceData;this.lastUpdate=Date.now();return deviceData;}catch(error){console.error('Error collecting device info:',error);return this._generateMockDeviceData();}});function _collectDeviceInfo(){return _collectDeviceInfo2.apply(this,arguments);}return _collectDeviceInfo;}()},{key:"_generateMockDeviceData",value:function _generateMockDeviceData(){return{platform:Platform?.OS||'unknown',version:Platform?.Version||'0.0',memory:{total:'8 GB',used:'5.2 GB',usedPercentage:65},storage:{total:'128 GB',used:'89 GB',usedPercentage:70},battery:{level:Math.floor(Math.random()*100),state:Math.random()>0.5?'charging':'unplugged'},cpu:{cores:8,usage:Math.floor(Math.random()*100),temperature:45+Math.floor(Math.random()*20)}};}},{key:"_extractBatteryInfo",value:function _extractBatteryInfo(deviceData){return{batteryLevel:deviceData.battery?.level||0,batteryState:deviceData.battery?.state||'unknown',powerSaveMode:deviceData.battery?.powerSaveMode||false};}},{key:"_extractPerformanceInfo",value:function _extractPerformanceInfo(deviceData){return{memory:deviceData.memory||{total:'Unknown',used:'Unknown',usedPercentage:0},cpu:deviceData.cpu||{cores:0,usage:0},storage:deviceData.storage||{total:'Unknown',usedPercentage:0}};}},{key:"_extractRelevantData",value:function _extractRelevantData(query,deviceData){var queryLower=query.toLowerCase();var relevantData={};if(queryLower.includes('battery')){relevantData.battery=deviceData.battery;}if(queryLower.includes('memory')||queryLower.includes('ram')){relevantData.memory=deviceData.memory;}if(queryLower.includes('storage')||queryLower.includes('disk')){relevantData.storage=deviceData.storage;}if(queryLower.includes('cpu')||queryLower.includes('processor')){relevantData.cpu=deviceData.cpu;}if(Object.keys(relevantData).length===0){relevantData.battery=deviceData.battery;relevantData.memory=deviceData.memory;}return relevantData;}},{key:"_generateStaticResponse",value:function _generateStaticResponse(query,relevantData){var queryLower=query.toLowerCase();if(queryLower.includes('battery')){var battery=relevantData.battery;if(battery){return`Your battery is at ${battery.level}% and ${battery.state==='charging'?'charging':'not charging'}.`;}}if(queryLower.includes('memory')){var memory=relevantData.memory;if(memory){return`You're using ${memory.usedPercentage}% of your ${memory.total} memory.`;}}return"I need more specific information to answer your question.";}},{key:"_generateFallbackInsights",value:function _generateFallbackInsights(deviceData){var insights=[];if(deviceData.memory?.usedPercentage>80){insights.push("Memory usage is high - consider closing unused apps");}if(deviceData.storage?.usedPercentage>85){insights.push("Storage is running low - consider freeing up space");}if(deviceData.battery?.level<20){insights.push("Battery is low - consider charging soon");}return insights.length>0?insights.join('. ')+'.':"Your device appears to be running normally.";}},{key:"_generateFallbackBatteryAdvice",value:function _generateFallbackBatteryAdvice(batteryData){if(batteryData.batteryLevel<20){return"Your battery is low. Consider charging your device and enabling power saving mode.";}if(batteryData.batteryLevel>80){return"Your battery level is good. To maintain battery health, avoid keeping it at 100% constantly.";}return"Your battery level looks reasonable. Monitor your usage patterns for optimization opportunities.";}},{key:"_generateFallbackPerformanceTips",value:function _generateFallbackPerformanceTips(performanceData){var tips=[];if(performanceData.memory?.usedPercentage>75){tips.push("High memory usage detected - restart apps periodically");}if(performanceData.storage?.usedPercentage>80){tips.push("Storage is getting full - clean up old files");}return tips.length>0?tips.join('. ')+'.':"Your device performance looks good. Regular maintenance helps keep it running smoothly.";}},{key:"_generateBasicRecommendations",value:function _generateBasicRecommendations(deviceData){var recommendations=[];if(deviceData.memory?.usedPercentage>80){recommendations.push("Close unused applications to free up memory");}if(deviceData.storage?.usedPercentage>85){recommendations.push("Delete old files and clear cache to free up storage");}if(deviceData.battery?.level<30){recommendations.push("Charge your device and enable battery saver mode");}if(recommendations.length===0){recommendations.push("Your device is running well - no immediate action needed");}return recommendations;}},{key:"_getBatteryTips",value:function _getBatteryTips(){return["Reduce screen brightness when possible","Close apps running in the background","Turn off unnecessary notifications","Use Wi-Fi instead of cellular data when available","Enable power saving mode when battery is low"];}},{key:"_getPerformanceRecommendations",value:function _getPerformanceRecommendations(){return["Restart your device regularly","Keep apps updated to latest versions","Clear app cache periodically","Remove unused apps","Ensure sufficient storage space"];}}]);}();var enhancedDeviceAI=new EnhancedDeviceAI();module.exports=enhancedDeviceAI;