var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _reactNative=require("react-native");var WindowsMCPServer=require('./WindowsMCPServer');var AndroidMCPServer=require('./AndroidMCPServer');var iOSMCPServer=require('./iOSMCPServer');var MCPClient=function(){function MCPClient(){(0,_classCallCheck2.default)(this,MCPClient);this.servers=new Map();this.aiProviders=new Map();this.deviceDataSources=new Map();this.isInitialized=false;this.config={timeout:30000,retryAttempts:3,enableFallback:true};}return(0,_createClass2.default)(MCPClient,[{key:"initialize",value:(function(){var _initialize=(0,_asyncToGenerator2.default)(function*(config={}){try{this.config={...this.config,...config};yield this._initializeDefaultProviders();yield this._initializeDeviceDataSources();this.isInitialized=true;console.log('MCP Client initialized successfully');return{success:true,providers:Array.from(this.aiProviders.keys()),dataSources:Array.from(this.deviceDataSources.keys())};}catch(error){console.error('Failed to initialize MCP client:',error);return{success:false,error:error.message};}});function initialize(){return _initialize.apply(this,arguments);}return initialize;}())},{key:"connectServer",value:(function(){var _connectServer=(0,_asyncToGenerator2.default)(function*(serverConfig){try{var name=serverConfig.name,type=serverConfig.type,endpoint=serverConfig.endpoint,auth=serverConfig.auth;if(!name||!type||!endpoint){throw new Error('Server configuration must include name, type, and endpoint');}var server=new MCPServerConnection(serverConfig);yield server.connect();this.servers.set(name,server);switch(type){case'ai-provider':this.aiProviders.set(name,server);break;case'data-source':this.deviceDataSources.set(name,server);break;default:console.warn(`Unknown server type: ${type}`);}console.log(`Connected to MCP server: ${name} (${type})`);return{success:true,server:name};}catch(error){console.error(`Failed to connect to MCP server ${serverConfig.name}:`,error);return{success:false,error:error.message};}});function connectServer(_x){return _connectServer.apply(this,arguments);}return connectServer;}())},{key:"generateInsights",value:(function(){var _generateInsights=(0,_asyncToGenerator2.default)(function*(deviceData,type='general',preferredProviders=[]){if(!this.isInitialized){throw new Error('MCP client not initialized. Call initialize() first.');}var providers=preferredProviders.length>0?preferredProviders:Array.from(this.aiProviders.keys());var lastError;for(var providerName of providers){try{var provider=this.aiProviders.get(providerName);if(!provider||!provider.isConnected()){console.log(`Provider ${providerName} not available, trying next...`);continue;}console.log(`Attempting to generate insights using provider: ${providerName}`);var result=yield provider.generateInsights(deviceData,type);return{success:true,insights:result,provider:providerName,timestamp:new Date().toISOString()};}catch(error){lastError=error;console.log(`Provider ${providerName} failed: ${error.message}, trying next...`);}}throw new Error(`All AI providers failed. Last error: ${lastError?.message||'Unknown error'}`);});function generateInsights(_x2){return _generateInsights.apply(this,arguments);}return generateInsights;}())},{key:"collectDeviceData",value:(function(){var _collectDeviceData=(0,_asyncToGenerator2.default)(function*(dataSources=[]){var sources=dataSources.length>0?dataSources:Array.from(this.deviceDataSources.keys());var deviceData={};var errors=[];for(var sourceName of sources){try{var source=this.deviceDataSources.get(sourceName);if(!source||!source.isConnected()){console.log(`Data source ${sourceName} not available`);continue;}var data=yield source.collectData();deviceData[sourceName]=data;}catch(error){errors.push({source:sourceName,error:error.message});console.error(`Failed to collect data from ${sourceName}:`,error);}}return{success:errors.length===0,data:deviceData,errors:errors,sources:sources};});function collectDeviceData(){return _collectDeviceData.apply(this,arguments);}return collectDeviceData;}())},{key:"getProviderStatus",value:function getProviderStatus(){var status={};for(var _ref of this.aiProviders){var _ref2=(0,_slicedToArray2.default)(_ref,2);var name=_ref2[0];var provider=_ref2[1];status[name]={connected:provider.isConnected(),type:provider.getType(),capabilities:provider.getCapabilities(),lastUsed:provider.getLastUsed()};}return status;}},{key:"getDataSourceStatus",value:function getDataSourceStatus(){var status={};for(var _ref3 of this.deviceDataSources){var _ref4=(0,_slicedToArray2.default)(_ref3,2);var name=_ref4[0];var source=_ref4[1];status[name]={connected:source.isConnected(),type:source.getType(),capabilities:source.getCapabilities(),lastCollected:source.getLastCollected()};}return status;}},{key:"disconnect",value:(function(){var _disconnect=(0,_asyncToGenerator2.default)(function*(){var disconnectPromises=[];var _loop=function*(name){disconnectPromises.push(server.disconnect().catch(error=>console.error(`Failed to disconnect from ${name}:`,error)));};for(var _ref5 of this.servers){var _ref6=(0,_slicedToArray2.default)(_ref5,2);var name=_ref6[0];var server=_ref6[1];yield*_loop(name);}yield Promise.allSettled(disconnectPromises);this.servers.clear();this.aiProviders.clear();this.deviceDataSources.clear();this.isInitialized=false;console.log('Disconnected from all MCP servers');});function disconnect(){return _disconnect.apply(this,arguments);}return disconnect;}())},{key:"_initializeDefaultProviders",value:(function(){var _initializeDefaultProviders2=(0,_asyncToGenerator2.default)(function*(){if(process.env.AZURE_OPENAI_API_KEY&&process.env.AZURE_OPENAI_ENDPOINT){yield this.connectServer({name:'azure-openai',type:'ai-provider',endpoint:process.env.AZURE_OPENAI_ENDPOINT,auth:{apiKey:process.env.AZURE_OPENAI_API_KEY,type:'api-key'}});}if(process.env.OPENAI_API_KEY){yield this.connectServer({name:'openai',type:'ai-provider',endpoint:'https://api.openai.com',auth:{apiKey:process.env.OPENAI_API_KEY,type:'bearer'}});}if(process.env.ANTHROPIC_API_KEY){yield this.connectServer({name:'anthropic',type:'ai-provider',endpoint:'https://api.anthropic.com',auth:{apiKey:process.env.ANTHROPIC_API_KEY,type:'x-api-key'}});}});function _initializeDefaultProviders(){return _initializeDefaultProviders2.apply(this,arguments);}return _initializeDefaultProviders;}())},{key:"_initializeDeviceDataSources",value:(function(){var _initializeDeviceDataSources2=(0,_asyncToGenerator2.default)(function*(){yield this.connectServer({name:'system-monitor',type:'data-source',endpoint:'local://system',auth:{type:'none'}});yield this.connectServer({name:'battery-monitor',type:'data-source',endpoint:'local://battery',auth:{type:'none'}});yield this.connectServer({name:'network-monitor',type:'data-source',endpoint:'local://network',auth:{type:'none'}});yield this._initializeOSSpecificServers();});function _initializeDeviceDataSources(){return _initializeDeviceDataSources2.apply(this,arguments);}return _initializeDeviceDataSources;}())},{key:"_initializeOSSpecificServers",value:(function(){var _initializeOSSpecificServers2=(0,_asyncToGenerator2.default)(function*(){try{switch(_reactNative.Platform.OS){case'windows':var windowsServer=new WindowsMCPServer();if(windowsServer.isAvailable()){yield windowsServer.connect();this.deviceDataSources.set(windowsServer.name,windowsServer);console.log('Windows-specific MCP server initialized');}break;case'android':var androidServer=new AndroidMCPServer();if(androidServer.isAvailable()){yield androidServer.connect();this.deviceDataSources.set(androidServer.name,androidServer);console.log('Android-specific MCP server initialized');}break;case'ios':var iosServer=new iOSMCPServer();if(iosServer.isAvailable()){yield iosServer.connect();this.deviceDataSources.set(iosServer.name,iosServer);console.log('iOS-specific MCP server initialized');}break;default:console.log(`No OS-specific MCP server available for platform: ${_reactNative.Platform.OS}`);}}catch(error){console.error('Failed to initialize OS-specific MCP servers:',error);}});function _initializeOSSpecificServers(){return _initializeOSSpecificServers2.apply(this,arguments);}return _initializeOSSpecificServers;}())}]);}();var MCPServerConnection=function(){function MCPServerConnection(config){(0,_classCallCheck2.default)(this,MCPServerConnection);this.config=config;this.connected=false;this.lastUsed=null;this.lastCollected=null;}return(0,_createClass2.default)(MCPServerConnection,[{key:"connect",value:function(){var _connect=(0,_asyncToGenerator2.default)(function*(){yield new Promise(resolve=>setTimeout(resolve,100));this.connected=true;console.log(`Connected to MCP server: ${this.config.name}`);});function connect(){return _connect.apply(this,arguments);}return connect;}()},{key:"disconnect",value:function(){var _disconnect2=(0,_asyncToGenerator2.default)(function*(){this.connected=false;console.log(`Disconnected from MCP server: ${this.config.name}`);});function disconnect(){return _disconnect2.apply(this,arguments);}return disconnect;}()},{key:"isConnected",value:function isConnected(){return this.connected;}},{key:"getType",value:function getType(){return this.config.type;}},{key:"getCapabilities",value:function getCapabilities(){switch(this.config.type){case'ai-provider':return['text-generation','analysis','recommendations'];case'data-source':return['real-time-monitoring','historical-data','metrics'];default:return[];}}},{key:"getLastUsed",value:function getLastUsed(){return this.lastUsed;}},{key:"getLastCollected",value:function getLastCollected(){return this.lastCollected;}},{key:"generateInsights",value:function(){var _generateInsights2=(0,_asyncToGenerator2.default)(function*(deviceData,type){this.lastUsed=new Date().toISOString();switch(this.config.name){case'azure-openai':return this._generateAzureOpenAIInsights(deviceData,type);case'openai':return this._generateOpenAIInsights(deviceData,type);case'anthropic':return this._generateAnthropicInsights(deviceData,type);default:throw new Error(`Unknown AI provider: ${this.config.name}`);}});function generateInsights(_x3,_x4){return _generateInsights2.apply(this,arguments);}return generateInsights;}()},{key:"collectData",value:function(){var _collectData=(0,_asyncToGenerator2.default)(function*(){this.lastCollected=new Date().toISOString();switch(this.config.name){case'system-monitor':return this._collectSystemData();case'battery-monitor':return this._collectBatteryData();case'network-monitor':return this._collectNetworkData();default:throw new Error(`Unknown data source: ${this.config.name}`);}});function collectData(){return _collectData.apply(this,arguments);}return collectData;}()},{key:"_generateAzureOpenAIInsights",value:function _generateAzureOpenAIInsights(deviceData,type){return`[Azure OpenAI] Generated ${type} insights for device with ${JSON.stringify(deviceData).length} bytes of data`;}},{key:"_generateOpenAIInsights",value:function _generateOpenAIInsights(deviceData,type){return`[OpenAI] Generated ${type} insights for device with ${JSON.stringify(deviceData).length} bytes of data`;}},{key:"_generateAnthropicInsights",value:function _generateAnthropicInsights(deviceData,type){return`[Anthropic] Generated ${type} insights for device with ${JSON.stringify(deviceData).length} bytes of data`;}},{key:"_collectSystemData",value:function _collectSystemData(){return{timestamp:new Date().toISOString(),source:'system-monitor',metrics:{cpuUsage:Math.random()*100,memoryUsage:Math.random()*100,diskUsage:Math.random()*100,temperature:40+Math.random()*30}};}},{key:"_collectBatteryData",value:function _collectBatteryData(){return{timestamp:new Date().toISOString(),source:'battery-monitor',metrics:{level:Math.floor(Math.random()*100),charging:Math.random()>0.5,health:85+Math.random()*15,cycleCount:Math.floor(Math.random()*1000)}};}},{key:"_collectNetworkData",value:function _collectNetworkData(){return{timestamp:new Date().toISOString(),source:'network-monitor',metrics:{connected:true,connectionType:'wifi',signalStrength:Math.floor(Math.random()*100),dataUsage:Math.floor(Math.random()*1000000)}};}}]);}();module.exports=MCPClient;