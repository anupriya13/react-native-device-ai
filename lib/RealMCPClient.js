var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _require=require('@modelcontextprotocol/sdk/client/index.js'),Client=_require.Client;var _require2=require('mcp-sdk-client-ssejs'),SSEClientTransport=_require2.SSEClientTransport;var _require3=require('react-native'),Platform=_require3.Platform;var WindowsMCPServer=require('./WindowsMCPServer');var AndroidMCPServer=require('./AndroidMCPServer');var iOSMCPServer=require('./iOSMCPServer');var RealMCPClient=function(){function RealMCPClient(){(0,_classCallCheck2.default)(this,RealMCPClient);this.clients=new Map();this.servers=new Map();this.isInitialized=false;this.config={timeout:30000,retryAttempts:3,enableFallback:true,transports:{default:'sse',allowInsecure:false}};}return(0,_createClass2.default)(RealMCPClient,[{key:"initialize",value:(function(){var _initialize=(0,_asyncToGenerator2.default)(function*(config={}){try{this.config={...this.config,...config};console.log('🔌 Initializing Real MCP Client...');yield this._initializeLocalServers();yield this._initializeExternalConnections();this.isInitialized=true;console.log('✅ Real MCP Client initialized successfully');return{success:true,clients:Array.from(this.clients.keys()),localServers:Array.from(this.servers.keys()),protocol:'MCP/1.0',transports:Object.keys(this._getAvailableTransports())};}catch(error){console.error('❌ Failed to initialize Real MCP client:',error);return{success:false,error:error.message};}});function initialize(){return _initialize.apply(this,arguments);}return initialize;}())},{key:"connectServer",value:(function(){var _connectServer=(0,_asyncToGenerator2.default)(function*(serverConfig){try{var name=serverConfig.name,url=serverConfig.url,_serverConfig$transpo=serverConfig.transport,transport=_serverConfig$transpo===void 0?'sse':_serverConfig$transpo,auth=serverConfig.auth;if(!name||!url){throw new Error('Server configuration must include name and url');}var client;var transportInstance;switch(transport){case'sse':transportInstance=new SSEClientTransport(url,{headers:this._buildAuthHeaders(auth)});break;case'stdio':throw new Error('STDIO transport not supported in React Native environment');default:throw new Error(`Unsupported transport type: ${transport}`);}client=new Client({name:`react-native-device-ai-${name}`,version:'3.0.0'},{capabilities:{roots:{listChanged:true},sampling:{}}});yield client.connect(transportInstance);var initResult=yield client.initialize();console.log(`✅ Connected to MCP server: ${name}`,{protocolVersion:initResult.protocolVersion,capabilities:initResult.capabilities,serverInfo:initResult.serverInfo});this.clients.set(name,{client,transport:transportInstance,config:serverConfig,serverInfo:initResult.serverInfo,capabilities:initResult.capabilities,connected:true,lastUsed:null});return{success:true,server:name,protocolVersion:initResult.protocolVersion,capabilities:initResult.capabilities};}catch(error){console.error(`❌ Failed to connect to MCP server ${serverConfig.name}:`,error);return{success:false,error:error.message};}});function connectServer(_x){return _connectServer.apply(this,arguments);}return connectServer;}())},{key:"listTools",value:(function(){var _listTools=(0,_asyncToGenerator2.default)(function*(serverName=null){if(!this.isInitialized){throw new Error('MCP client not initialized. Call initialize() first.');}var results={};var clientsToQuery=serverName?[this.clients.get(serverName)].filter(Boolean):Array.from(this.clients.values());for(var clientInfo of clientsToQuery){try{if(!clientInfo.connected)continue;var tools=yield clientInfo.client.listTools();results[clientInfo.config.name]={tools:tools.tools,serverInfo:clientInfo.serverInfo};}catch(error){console.error(`Failed to list tools from ${clientInfo.config.name}:`,error);results[clientInfo.config.name]={error:error.message};}}return results;});function listTools(){return _listTools.apply(this,arguments);}return listTools;}())},{key:"callTool",value:(function(){var _callTool=(0,_asyncToGenerator2.default)(function*(serverName,toolName,toolArguments={}){if(!this.isInitialized){throw new Error('MCP client not initialized. Call initialize() first.');}var clientInfo=this.clients.get(serverName);if(!clientInfo||!clientInfo.connected){throw new Error(`Server ${serverName} not connected`);}try{clientInfo.lastUsed=new Date().toISOString();var result=yield clientInfo.client.callTool({name:toolName,arguments:toolArguments});return{success:true,result:result.content,server:serverName,tool:toolName,timestamp:clientInfo.lastUsed};}catch(error){console.error(`Failed to call tool ${toolName} on server ${serverName}:`,error);throw error;}});function callTool(_x2,_x3){return _callTool.apply(this,arguments);}return callTool;}())},{key:"generateInsights",value:(function(){var _generateInsights=(0,_asyncToGenerator2.default)(function*(deviceData,type='general',preferredServers=[]){if(!this.isInitialized){throw new Error('MCP client not initialized. Call initialize() first.');}var servers=preferredServers.length>0?preferredServers:Array.from(this.clients.keys());for(var serverName of servers){try{var clientInfo=this.clients.get(serverName);if(!clientInfo||!clientInfo.connected)continue;var tools=yield clientInfo.client.listTools();var analysisTool=tools.tools.find(tool=>tool.name.includes('analyze')||tool.name.includes('insight')||tool.name.includes('recommend'));if(analysisTool){var result=yield this.callTool(serverName,analysisTool.name,{deviceData,analysisType:type});return{success:true,insights:result.result,server:serverName,tool:analysisTool.name,protocol:'MCP/1.0',timestamp:new Date().toISOString()};}}catch(error){console.log(`Server ${serverName} failed: ${error.message}, trying next...`);}}return yield this._generateLocalInsights(deviceData,type);});function generateInsights(_x4){return _generateInsights.apply(this,arguments);}return generateInsights;}())},{key:"collectDeviceData",value:(function(){var _collectDeviceData=(0,_asyncToGenerator2.default)(function*(serverNames=[]){var servers=serverNames.length>0?serverNames:Array.from(this.servers.keys());var deviceData={};var errors=[];for(var serverName of servers){try{var server=this.servers.get(serverName);if(!server||!server.isConnected()){console.log(`Local server ${serverName} not available`);continue;}var data=yield server.collectData();deviceData[serverName]={...data,protocol:'MCP-Local',serverType:server.getType()};}catch(error){errors.push({server:serverName,error:error.message});console.error(`Failed to collect data from local server ${serverName}:`,error);}}return{success:errors.length===0,data:deviceData,errors:errors,servers:servers,protocol:'MCP/1.0'};});function collectDeviceData(){return _collectDeviceData.apply(this,arguments);}return collectDeviceData;}())},{key:"getConnectionStatus",value:function getConnectionStatus(){var status={protocol:'MCP/1.0',initialized:this.isInitialized,externalConnections:{},localServers:{}};for(var _ref of this.clients){var _ref2=(0,_slicedToArray2.default)(_ref,2);var name=_ref2[0];var clientInfo=_ref2[1];status.externalConnections[name]={connected:clientInfo.connected,transport:clientInfo.transport.constructor.name,serverInfo:clientInfo.serverInfo,capabilities:clientInfo.capabilities,lastUsed:clientInfo.lastUsed};}for(var _ref3 of this.servers){var _ref4=(0,_slicedToArray2.default)(_ref3,2);var _name=_ref4[0];var server=_ref4[1];status.localServers[_name]={connected:server.isConnected(),type:server.getType(),capabilities:server.getCapabilities(),lastCollected:server.getLastCollected()};}return status;}},{key:"disconnect",value:(function(){var _disconnect=(0,_asyncToGenerator2.default)(function*(){var disconnectPromises=[];var _loop=function*(name){disconnectPromises.push(clientInfo.client.close().catch(error=>console.error(`Failed to disconnect from ${name}:`,error)));};for(var _ref5 of this.clients){var _ref6=(0,_slicedToArray2.default)(_ref5,2);var name=_ref6[0];var clientInfo=_ref6[1];yield*_loop(name);}var _loop2=function*(_name2){disconnectPromises.push(server.disconnect().catch(error=>console.error(`Failed to disconnect local server ${_name2}:`,error)));};for(var _ref7 of this.servers){var _ref8=(0,_slicedToArray2.default)(_ref7,2);var _name2=_ref8[0];var server=_ref8[1];yield*_loop2(_name2);}yield Promise.allSettled(disconnectPromises);this.clients.clear();this.servers.clear();this.isInitialized=false;console.log('🔌 Disconnected from all MCP servers');});function disconnect(){return _disconnect.apply(this,arguments);}return disconnect;}())},{key:"_initializeLocalServers",value:(function(){var _initializeLocalServers2=(0,_asyncToGenerator2.default)(function*(){try{var osServer;switch(Platform.OS){case'windows':osServer=new WindowsMCPServer();break;case'android':osServer=new AndroidMCPServer();break;case'ios':osServer=new iOSMCPServer();break;default:console.log(`No OS-specific MCP server available for platform: ${Platform.OS}`);return;}if(osServer&&osServer.isAvailable()){yield osServer.connect();this.servers.set(osServer.name,osServer);console.log(`✅ Local ${Platform.OS} MCP server initialized`);}}catch(error){console.error('Failed to initialize local MCP servers:',error);}});function _initializeLocalServers(){return _initializeLocalServers2.apply(this,arguments);}return _initializeLocalServers;}())},{key:"_initializeExternalConnections",value:(function(){var _initializeExternalConnections2=(0,_asyncToGenerator2.default)(function*(){var externalServers=[{name:'ai-analysis-server',url:process.env.MCP_AI_SERVER_URL,transport:'sse',auth:{type:'bearer',token:process.env.MCP_AI_SERVER_TOKEN}},{name:'device-insights-server',url:process.env.MCP_DEVICE_SERVER_URL,transport:'sse',auth:{type:'api-key',apiKey:process.env.MCP_DEVICE_SERVER_KEY}}];for(var serverConfig of externalServers){if(serverConfig.url){try{yield this.connectServer(serverConfig);}catch(error){console.log(`Optional MCP server ${serverConfig.name} not available:`,error.message);}}}});function _initializeExternalConnections(){return _initializeExternalConnections2.apply(this,arguments);}return _initializeExternalConnections;}())},{key:"_buildAuthHeaders",value:function _buildAuthHeaders(auth){if(!auth)return{};switch(auth.type){case'bearer':return{'Authorization':`Bearer ${auth.token}`};case'api-key':return{'X-API-Key':auth.apiKey};case'basic':var encoded=btoa(`${auth.username}:${auth.password}`);return{'Authorization':`Basic ${encoded}`};default:return{};}}},{key:"_getAvailableTransports",value:function _getAvailableTransports(){return{sse:'Server-Sent Events (React Native compatible)'};}},{key:"_generateLocalInsights",value:(function(){var _generateLocalInsights2=(0,_asyncToGenerator2.default)(function*(deviceData,type){try{var osServerName=`${Platform.OS}-device-server`;var osServer=this.servers.get(osServerName);if(osServer&&osServer.isConnected()){var insights=yield osServer.generateInsights(deviceData,type);return{success:true,insights,server:osServerName,tool:'local-analysis',protocol:'MCP-Local',timestamp:new Date().toISOString()};}throw new Error('No available MCP servers for insight generation');}catch(error){throw new Error(`Local insight generation failed: ${error.message}`);}});function _generateLocalInsights(_x5,_x6){return _generateLocalInsights2.apply(this,arguments);}return _generateLocalInsights;}())}]);}();module.exports=RealMCPClient;